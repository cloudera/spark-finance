package com.cloudera.sparkts.models

import org.scalatest.FunSuite
import org.apache.spark.mllib.linalg._
import org.scalatest.Matchers._

class HoltWintersMultModelSuite extends FunSuite {

      /*

      Double[] timeSeries = {570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0};
      int period = 7;
              
      > val = read.table("C:/Users/rchanda/Desktop/inData",header=FALSE)
      > f=7
      > x <- ts(val, frequency=f)
      > length(x)
      [1] 280
      > wind = 2*f
      > x[1L:wind]
       [1] 570537 287069 513627 475744 372749 392691 365820 371762 380489 461117
      [11] 510448 379375 354889 363152
      > st = decompose(ts(x[1L:wind],start=start(x),frequency=f),"multiplicative")
      > dat = na.omit(st$trend)
      > cf = coef(.lm.fit(x=cbind(1,seq_along(dat)),y=dat))
      > cf
      [1] 414074.194  -1489.253
      > st$figure
      [1] 0.9139442 0.9332329 1.1461307 1.1955770 0.9413001 0.9594128 0.9104024
      > model <- HoltWinters(x,seasonal="multiplicative")
      > library(forecast)
      > forecasts = forecast.HoltWinters(model,h=7)
      > forecasts
               Point Forecast      Lo 80    Hi 80     Lo 95     Hi 95
      41.00000       31231.58   1103.889 61359.27 -14844.75  77307.90
      41.14286       30388.93  -9587.273 70365.13 -30749.40  91527.25
      41.28571       36359.41 -18756.895 91475.71 -47933.70 120652.52
      41.42857       34351.60 -26101.906 94805.10 -58104.06 126807.25
      41.57143       26606.83 -29708.812 82922.48 -59520.51 112734.18
      41.71429       25351.51 -36811.754 87514.77 -69719.00 120422.01
      41.85714       22931.06 -34628.857 80490.97 -65099.24 110961.35
      > model
      Holt-Winters exponential smoothing with trend and multiplicative seasonal component.
      
      Call:
      HoltWinters(x = x, seasonal = "multiplicative")
      
      Smoothing parameters:
       alpha: 0.5709254
       beta : 0
       gamma: 0.2196409
      
      Coefficients:
                  [,1]
      a  36603.9652244
      b  -1489.2534014
      s1     0.8894158
      s2     0.9037476
      s3     1.1314157
      s4     1.1208814
      s5     0.9125149
      s6     0.9162606
      s7     0.8759269
     */
  
  test("Initial Level Trend Seasonal Paramaters - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")

    val initParams = model.initHoltWinters(ts)
    
    initParams._1 should be (414074.194 +- 1)
    initParams._2 should be (-1489.253 +- 1)
    
    val initSeasonal = initParams._3
    
    val actualInitialSeasonalIndices = new Array[Double](7)
    actualInitialSeasonalIndices(0) = 0.9139442;
    actualInitialSeasonalIndices(1) = 0.9332329;
    actualInitialSeasonalIndices(2) = 1.1461307;
    actualInitialSeasonalIndices(3) = 1.1955770;
    actualInitialSeasonalIndices(4) = 0.9413001;
    actualInitialSeasonalIndices(5) = 0.9594128;
    actualInitialSeasonalIndices(6) = 0.9104024;
    
    for(i <- 0 until period){
        initSeasonal(i) should be (actualInitialSeasonalIndices(i) +- 1)
    }   
  }

  test("Optimal Paramaters alpha beta gamma - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    model.alpha should be (0.5709254 +- 0.01)
    model.beta should be (0.0 +- 0.01)
    model.gamma should be (0.2196409 +- 0.01)
  }
 
  test("Final Level Trend Season Parameters - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val n = ts.size
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    val (fitted, level, trend, season) = model.getHoltWintersComponents(ts)
    
    val finalLevel = level(n - period)
    val finalTrend = trend(n - period)
    val finalSeason = new Array[Double](period)
    
    for(i <- 0 until period){
      finalSeason(i) = season(i + n - period)
    }
    
    finalLevel should be (36603.9652244 +- 0.01)
    finalTrend should be (-1489.2534014 +- 0.01)
    
    val actualFinalSeasonIndices = new Array[Double](period)
    actualFinalSeasonIndices(0) = 0.8894158
    actualFinalSeasonIndices(1) = 0.9037476
    actualFinalSeasonIndices(2) = 1.1314157
    actualFinalSeasonIndices(3) = 1.1208814
    actualFinalSeasonIndices(4) = 0.9125149
    actualFinalSeasonIndices(5) = 0.9162606
    actualFinalSeasonIndices(6) = 0.8759269
    
    for(i <- 0 until period){
        finalSeason(i) should be (actualFinalSeasonIndices(i) +- 0.01)
    }
  }
  
  test("Forecast - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    val forecasted = new DenseVector(new Array[Double](period))
    model.forecast(ts, forecasted)
    
    val actualForecasted = new Array[Double](period)
    actualForecasted(0) = 31231.58
    actualForecasted(1) = 30388.93
    actualForecasted(2) = 36359.41
    actualForecasted(3) = 34351.60
    actualForecasted(4) = 26606.83
    actualForecasted(5) = 25351.51
    actualForecasted(6) = 22931.06
    
    for(i <- 0 until period){
        forecasted(i) should be (actualForecasted(i) +- 0.1)
    }
  }
  
  /*   
Double[] timeSeries = {570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0};
int period = 10;

> val = read.table("C:/Users/rchanda/Desktop/inData",header=FALSE)
> f=10
> x <- ts(val, frequency=f)
> length(x)
[1] 280
> wind = 2*f
> x[1L:wind]
 [1] 570537 287069 513627 475744 372749 392691 365820 371762 380489 461117
[11] 510448 379375 354889 363152 375141 404812 497512 534322 376393 408513
> st = decompose(ts(x[1L:wind],start=start(x),frequency=f),"multiplicative")
> dat = na.omit(st$trend)
> cf = coef(.lm.fit(x=cbind(1,seq_along(dat)),y=dat))
> cf
[1] 406261.5500    879.7164
> st$figure
 [1] 1.3355185 0.9748857 0.8798645 0.8836019 0.9188892 0.9778942 0.9074664
 [8] 0.9295975 0.9836173 1.2086648
> model <- HoltWinters(x,seasonal="multiplicative")
> library(forecast)
> forecasts = forecast.HoltWinters(model,h=10)
> forecasts
     Point Forecast     Lo 80    Hi 80      Lo 95    Hi 95
29.0      13845.410 -18738.27 46429.09  -35987.02 63677.84
29.1       9996.306 -27306.61 47299.22  -47053.58 67046.19
29.2       6178.661 -35690.52 48047.84  -57854.73 70212.05
29.3       2318.881 -44853.46 49491.22  -69824.99 74462.75
29.4      -2009.374 -55000.76 50982.01  -83052.70 79033.95
29.5      -6541.574 -63399.53 50316.39  -93498.32 80415.17
29.6     -11369.940 -72912.83 50172.95 -105491.67 82751.79
29.7     -16081.424 -81205.41 49042.56 -115679.96 83517.11
29.8     -21794.191 -92922.51 49334.13 -130575.56 86987.18
29.9     -26102.771 -91468.83 39263.28 -126071.53 73865.98
> model
Holt-Winters exponential smoothing with trend and multiplicative seasonal component.

Call:
HoltWinters(x = x, seasonal = "multiplicative")

Smoothing parameters:
 alpha: 0.1664642
 beta : 0.01960546
 gamma: 0.1674311

Coefficients:
             [,1]
a   21514.2576513
b   -4726.5339116
s1      0.8247342
s2      0.8287994
s3      0.8423927
s4      0.8890998
s5      0.9485284
s6      0.9556794
s7      0.9825831
s8      0.9867107
s9      1.0366069
s10     1.0136573
> */
  
  test("Initial Level Trend Seasonal Paramaters - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
        ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")

    val initParams = model.initHoltWinters(ts)
    
    initParams._1 should be (406261.5500 +- 0.01)
    initParams._2 should be (879.7164 +- 0.01)
    
    val initSeasonal = initParams._3
    
    val actualInitialSeasonalIndices = new Array[Double](period)
    actualInitialSeasonalIndices(0) = 1.3355185
    actualInitialSeasonalIndices(1) = 0.9748857
    actualInitialSeasonalIndices(2) = 0.8798645
    actualInitialSeasonalIndices(3) = 0.8836019
    actualInitialSeasonalIndices(4) = 0.9188892
    actualInitialSeasonalIndices(5) = 0.9778942
    actualInitialSeasonalIndices(6) = 0.9074664
    actualInitialSeasonalIndices(7) = 0.9295975
    actualInitialSeasonalIndices(8) = 0.9836173
    actualInitialSeasonalIndices(9) = 1.2086648
    
    for(i <- 0 until period){
        initSeasonal(i) should be (actualInitialSeasonalIndices(i) +- 0.01)
    }
  }
  
  test("Optimal Paramaters alpha beta gamma - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    model.alpha should be (0.1664642 +- 0.01)
    model.beta should be (0.01960546 +- 0.01)
    model.gamma should be (0.1674311 +- 0.01)
  }
  
  test("Final Level Trend Season Parameters - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val n = ts.size
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    val (fitted, level, trend, season) = model.getHoltWintersComponents(ts)
    
    val finalLevel = level(n - period)
    val finalTrend = trend(n - period)
    val finalSeason = new Array[Double](period)
    
    for(i <- 0 until period){
      finalSeason(i) = season(i + n - period)
    }
    
    finalLevel should be (21514.2576513 +- 20)
    finalTrend should be (-4726.5339116 +- 3)
    
    val actualFinalSeason = new Array[Double](period)
    actualFinalSeason(0) = 0.8247342
    actualFinalSeason(1) = 0.8287994
    actualFinalSeason(2) = 0.8423927
    actualFinalSeason(3) = 0.8890998
    actualFinalSeason(4) = 0.9485284
    actualFinalSeason(5) = 0.9556794
    actualFinalSeason(6) = 0.9825831
    actualFinalSeason(7) = 0.9867107
    actualFinalSeason(8) = 1.0366069
    actualFinalSeason(9) = 1.0136573
    
    for(i <- 0 until period){
        finalSeason(i) should be (actualFinalSeason(i) +- 1)
    }
  }
  
  test("Forecast - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
        ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "multiplicative", "BOBYQA")
    
    val forecasted = new DenseVector(new Array[Double](period))
    model.forecast(ts, forecasted)
    
    val actualForecasted = new Array[Double](period)
    actualForecasted(0) = 13845.410 
    actualForecasted(1) = 9996.306 
    actualForecasted(2) = 6178.661 
    actualForecasted(3) = 2318.881 
    actualForecasted(4) = -2009.374 
    actualForecasted(5) = -6541.574 
    actualForecasted(6) = -11369.940 
    actualForecasted(7) = -16081.424 
    actualForecasted(8) = -21794.191 
    actualForecasted(9) = -26102.771 
    
    for(i <- 0 until period){
        forecasted(i) should be (actualForecasted(i) +- 50)
    }
  }
  
}