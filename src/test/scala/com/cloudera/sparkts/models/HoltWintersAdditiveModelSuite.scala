package com.cloudera.sparkts.models

import org.scalatest.FunSuite
import org.apache.spark.mllib.linalg._
import org.scalatest.Matchers._

class HoltWintersAdditiveModelSuite extends FunSuite {

      /*

Double[] timeSeries = {570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0};
int period = 7;
        
> val = read.table("C:/Users/rchanda/Desktop/inData",header=FALSE)
> f=7
> x <- ts(val, frequency=f)
> length(x)
[1] 280
> wind = 2*f
> x[1L:wind]
 [1] 570537 287069 513627 475744 372749 392691 365820 371762 380489 461117 510448 379375 354889
[14] 363152
> st = decompose(ts(x[1L:wind],start=start(x),frequency=f),"additive")
> dat = na.omit(st$trend)
> cf = coef(.lm.fit(x=cbind(1,seq_along(dat)),y=dat))
> cf
[1] 414074.194  -1489.253
> st$figure
[1] -35104.77 -27324.34  58703.95  79849.45 -23315.77 -16719.48 -36089.05
> model <- HoltWinters(x)
> library(forecast)
> forecasts = forecast.HoltWinters(model,h=7)
> forecasts
         Point Forecast      Lo 80     Hi 80      Lo 95     Hi 95
41.00000       9039.751 -42283.647  60363.15  -69452.61  87532.12
41.14286       8360.766 -48550.599  65272.13  -78677.66  95399.19
41.28571      52169.923  -9827.784 114167.63  -42647.39 146987.23
41.42857      64237.344  -2459.942 130934.63  -37767.35 166242.04
41.57143      38188.041 -32898.809 109274.89  -70529.91 146906.00
41.71429      32091.315 -43129.377 107312.01  -82948.81 147131.44
41.85714      14301.629 -64837.266  93440.52 -106730.87 135334.12
> model
Holt-Winters exponential smoothing with trend and additive seasonal component.

Call:
HoltWinters(x = x)

Smoothing parameters:
 alpha: 0.4791758
 beta : 0
 gamma: 0.3739373

Coefficients:
         [,1]
a   35528.467
b   -1489.253
s1 -24999.462
s2 -24189.194
s3  21109.217
s4  34665.891
s5  10105.841
s6   5498.368
s7 -10802.064
> 
     */
  
  test("Initial Level Trend Seasonal Paramaters - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")

    val initParams = model.initHoltWinters(ts)
    
    initParams._1 should be (414074.194 +- 1)
    initParams._2 should be (-1489.253 +- 1)
    
    val initSeasonal = initParams._3
    
    val actualInitialSeasonalIndices = new Array[Double](7)
    actualInitialSeasonalIndices(0) = -35104.77;
    actualInitialSeasonalIndices(1) = -27324.34;
    actualInitialSeasonalIndices(2) = 58703.95;
    actualInitialSeasonalIndices(3) = 79849.45;
    actualInitialSeasonalIndices(4) = -23315.77;
    actualInitialSeasonalIndices(5) = -16719.48;
    actualInitialSeasonalIndices(6) = -36089.05;
    
    for(i <- 0 until period){
        initSeasonal(i) should be (actualInitialSeasonalIndices(i) +- 1)
    }   
  }

  test("Optimal Paramaters alpha beta gamma - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    model.alpha should be (0.47917 +- 0.01)
    model.beta should be (0.0 +- 0.01)
    model.gamma should be (0.37393 +- 0.01)
  }
 
  test("Final Level Trend Season Parameters - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val n = ts.size
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    val (fitted, level, trend, season) = model.getHoltWintersComponents(ts)
    
    val finalLevel = level(n - period)
    val finalTrend = trend(n - period)
    val finalSeason = new Array[Double](period)
    
    for(i <- 0 until period){
      finalSeason(i) = season(i + n - period)
    }
    
    finalLevel should be (35528.467 +- 10)
    finalTrend should be (-1489.253 +- 10)
    
    val actualFinalSeasonIndices = new Array[Double](period)
    actualFinalSeasonIndices(0) = -24999.462
    actualFinalSeasonIndices(1) = -24189.194
    actualFinalSeasonIndices(2) = 21109.217
    actualFinalSeasonIndices(3) = 34665.891
    actualFinalSeasonIndices(4) = 10105.841
    actualFinalSeasonIndices(5) = 5498.368
    actualFinalSeasonIndices(6) = -10802.064
    
    for(i <- 0 until period){
        finalSeason(i) should be (actualFinalSeasonIndices(i) +- 1)
    }
  }
  
  test("Forecast - Odd Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 7
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    val forecasted = new DenseVector(new Array[Double](period))
    model.forecast(ts, forecasted)
    
    val actualForecasted = new Array[Double](period)
    actualForecasted(0) = 9039.751
    actualForecasted(1) = 8360.766
    actualForecasted(2) = 52169.923
    actualForecasted(3) = 64237.344
    actualForecasted(4) = 38188.041
    actualForecasted(5) = 32091.315
    actualForecasted(6) = 14301.629
    
    for(i <- 0 until period){
        forecasted(i) should be (actualForecasted(i) +- 1)
    }
  }
  
  /*   
Double[] timeSeries = {570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0};
int period = 7;
// Model default additive
        
> val = read.table("C:/Users/rchanda/Desktop/inData",header=FALSE)
> f=10
> x <- ts(val, frequency=f)
> length(x)
[1] 280
> wind = 2*f
> x[1L:wind]
 [1] 570537 287069 513627 475744 372749 392691 365820 371762 380489 461117 510448 379375 354889
[14] 363152 375141 404812 497512 534322 376393 408513
> st = decompose(ts(x[1L:wind],start=start(x),frequency=f),"additive")
> dat = na.omit(st$trend)
> cf = coef(.lm.fit(x=cbind(1,seq_along(dat)),y=dat))
> cf
[1] 406261.5500    879.7164
> st$figure
 [1] 129965.14  -8298.51 -47497.11 -47157.31 -32333.31  -7853.46 -36335.31 -27071.71  -4778.21
[10]  81359.79
> model <- HoltWinters(x)
> library(forecast)
> forecasts = forecast.HoltWinters(model,h=10)
> forecasts
     Point Forecast     Lo 80     Hi 80     Lo 95    Hi 95
29.0       697.7190 -104288.5 105683.97 -159864.9 161260.3
29.1     -2590.1316 -109076.5 103896.23 -165447.0 160266.7
29.2     -3231.2279 -111252.7 104790.26 -168435.8 161973.4
29.3     -2679.7025 -112270.9 106911.48 -170285.0 164925.6
29.4      -897.1538 -112092.2 110297.86 -170955.3 169160.9
29.5    -16379.0497 -129211.6  96453.46 -188941.5 156183.4
29.6     -8507.3392 -123010.5 105995.87 -183624.9 166610.2
29.7     -8963.3251 -125170.0 107243.32 -186686.1 168759.4
29.8    -16251.1690 -134193.5 101691.20 -196628.5 164126.1
29.9    -19907.0647 -139617.0  99802.83 -202987.6 163173.4
> model
Holt-Winters exponential smoothing with trend and additive seasonal component.

Call:
HoltWinters(x = x)

Smoothing parameters:
 alpha: 0.1664547
 beta : 0.01920073
 gamma: 0.1391428

Coefficients:
          [,1]
a    35520.134
b    -4403.435
s1  -30418.980
s2  -29303.396
s3  -25541.057
s4  -20586.097
s5  -14400.113
s6  -25478.574
s7  -13203.429
s8   -9255.980
s9  -12140.389
s10 -11392.850
> */
  
  test("Initial Level Trend Seasonal Paramaters - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
        ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")

    val initParams = model.initHoltWinters(ts)
    
    initParams._1 should be (406261.5500 +- 0.1)
    initParams._2 should be (879.7164 +- 0.1)
    
    val initSeasonal = initParams._3
    
    val actualInitialSeasonalIndices = new Array[Double](period)
    actualInitialSeasonalIndices(0) = 129965.14 
    actualInitialSeasonalIndices(1) = -8298.51
    actualInitialSeasonalIndices(2) = -47497.11 
    actualInitialSeasonalIndices(3) = -47157.31
    actualInitialSeasonalIndices(4) = -32333.31
    actualInitialSeasonalIndices(5) = -7853.46
    actualInitialSeasonalIndices(6) = -36335.31
    actualInitialSeasonalIndices(7) = -27071.71
    actualInitialSeasonalIndices(8) = -4778.21
    actualInitialSeasonalIndices(9) = 81359.79
    
    for(i <- 0 until period){
        initSeasonal(i) should be (actualInitialSeasonalIndices(i) +- 1)
    }
  }
  
  test("Optimal Paramaters alpha beta gamma - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    model.alpha should be (0.1664547 +- 0.01)
    model.beta should be (0.01920073 +- 0.01)
    model.gamma should be (0.1391428 +- 0.01)
  }
  
  test("Final Level Trend Season Parameters - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
         ))
    val n = ts.size
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    val (fitted, level, trend, season) = model.getHoltWintersComponents(ts)
    
    val finalLevel = level(n - period)
    val finalTrend = trend(n - period)
    val finalSeason = new Array[Double](period)
    
    for(i <- 0 until period){
      finalSeason(i) = season(i + n - period)
    }
    
    finalLevel should be (35520.134 +- 30)
    finalTrend should be (-4403.435 +- 5)
    
    val actualFinalSeason = new Array[Double](period)
    actualFinalSeason(0) = -30418.980
    actualFinalSeason(1) = -29303.396
    actualFinalSeason(2) = -25541.057
    actualFinalSeason(3) = -20586.097
    actualFinalSeason(4) = -14400.113
    actualFinalSeason(5) = -25478.574
    actualFinalSeason(6) = -13203.429
    actualFinalSeason(7) = -9255.980
    actualFinalSeason(8) = -12140.389
    actualFinalSeason(9) = -11392.850
    
    for(i <- 0 until period){
        finalSeason(i) should be (actualFinalSeason(i) +- 20)
    }
  }
  
  test("Forecast - Even Period"){
    val ts = new DenseVector(Array(
        570537.0,287069.0,513627.0,475744.0,372749.0,392691.0,365820.0,371762.0,380489.0,461117.0,510448.0,379375.0,354889.0,363152.0,375141.0,404812.0,497512.0,534322.0,376393.0,408513.0,385068.0,418838.0,441145.0,549804.0,532282.0,471529.0,459244.0,322786.0,402969.0,436306.0,565434.0,641668.0,448542.0,343767.0,416765.0,418692.0,431592.0,535050.0,603344.0,426394.0,368503.0,422294.0,460824.0,479949.0,634493.0,636475.0,371593.0,433742.0,384255.0,421100.0,442944.0,539976.0,540323.0,423238.0,417947.0,419964.0,437294.0,431356.0,565991.0,621398.0,426804.0,435835.0,438610.0,441803.0,393815.0,526719.0,589671.0,439618.0,425283.0,419063.0,442856.0,463867.0,558982.0,594386.0,459115.0,451442.0,431100.0,433450.0,455575.0,534083.0,596930.0,450573.0,425778.0,422933.0,435630.0,453414.0,548244.0,592999.0,455681.0,434091.0,442167.0,457496.0,482491.0,615421.0,667425.0,258029.0,414119.0,386304.0,398168.0,419296.0,511460.0,566625.0,425760.0,399142.0,392683.0,442526.0,460155.0,556457.0,584601.0,431719.0,396970.0,404244.0,413685.0,433860.0,527054.0,558181.0,428760.0,402209.0,401267.0,416365.0,456927.0,575354.0,602992.0,449822.0,437631.0,422462.0,434072.0,470768.0,578826.0,649424.0,450040.0,415996.0,402262.0,413053.0,442583.0,537347.0,558733.0,436130.0,412892.0,409219.0,426359.0,454428.0,580008.0,579063.0,435304.0,421342.0,410454.0,417106.0,444069.0,543672.0,564796.0,427688.0,413919.0,411793.0,438717.0,459968.0,548613.0,558351.0,432147.0,415402.0,414904.0,430622.0,454036.0,538602.0,552761.0,420321.0,416189.0,419442.0,433052.0,456708.0,563621.0,589235.0,423206.0,411955.0,398434.0,416911.0,439773.0,526722.0,512197.0,397196.0,409632.0,418906.0,450878.0,519672.0,619046.0,406173.0,369878.0,412858.0,403153.0,409322.0,429095.0,515612.0,512178.0,393505.0,397401.0,386682.0,420435.0,449550.0,517764.0,518173.0,389217.0,399918.0,393784.0,404626.0,428903.0,517213.0,510218.0,391032.0,395692.0,390896.0,396339.0,429681.0,550309.0,547804.0,407432.0,427894.0,419548.0,426231.0,442530.0,540450.0,542487.0,414069.0,411566.0,390219.0,408871.0,430942.0,529559.0,531067.0,406961.0,410550.0,175508.0,164802.0,175185.0,214273.0,218653.0,162426.0,164472.0,164401.0,166355.0,177265.0,215162.0,221476.0,160790.0,171381.0,180150.0,176385.0,195935.0,237112.0,223748.0,166382.0,176127.0,172184.0,179160.0,190286.0,230785.0,170326.0,173002.0,174434.0,176769.0,130912.0,59317.0,63286.0,61100.0,47618.0,40739.0,39902.0,41375.0,41824.0,50434.0,47863.0,37397.0,31743.0,30636.0,34146.0,37596.0,46954.0,41886.0,33503.0,35141.0,32543.0
        ))
    val period = 10
    val model = HoltWinters.fitModel(ts, period, "additive", "BOBYQA")
    
    val forecasted = new DenseVector(new Array[Double](period))
    model.forecast(ts, forecasted)
    
    val actualForecasted = new Array[Double](period)
    actualForecasted(0) =    697.7190
    actualForecasted(1) =  -2590.1316
    actualForecasted(2) =  -3231.2279
    actualForecasted(3) =  -2679.7025
    actualForecasted(4) =   -897.1538
    actualForecasted(5) = -16379.0497
    actualForecasted(6) =  -8507.3392
    actualForecasted(7) =  -8963.3251
    actualForecasted(8) = -16251.1690
    actualForecasted(9) = -19907.0647
    
    for(i <- 0 until period){
        forecasted(i) should be (actualForecasted(i) +- 50)
    }
  }
  
}